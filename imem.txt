DEPTH=1024; 	% Memory depth and width are required 
		% DEPTH is the number of addresses 
WIDTH = 32; 	% WIDTH is the number of bits of data per word
		% DEPTH and WIDTH should be entered as decimal numbers

ADDRESS_RADIX = DEC; 	% Address and value radixes are required
DATA_RADIX = BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless
			% otherwise specified, radixes = HEX

-- Specify values for addresses, which can be single address or range
-- SOME THINGS TO CONSIDER
-- 1) This memory is word-addressable, versus the MIPS conceptual byte-addressable memory.
--    This means that address 1 corresponds to word 1, address 2 corresponds to word 2, etc.
--    Since MIPS will be generating byte addresses, you will have to create some (very simple)
--    logic in your VHDL wrapper to deal with byte/word offsets. 
-- 2) The "single address" notation seems to be least likely to cause confusion so that is what
--    I recommend. 
-- 3) The values need to be in 32-bit hex form (i.e. don't use F when you really mean 0000000F).

-- Assembly code:
--addi $sp, $zero, 1024 # initialize stack pointer
--lw   $a1, 0($zero)    # Size of Array
--addi $a0, $zero, 4    # Array[0]
--
--jal SORT # Sort the array
--noop
--noop
--noop
--j end # End the program
--noop
--noop
--noop
--
--SORT :
--    addi  $sp, $sp, -20
--    sw    $ra, 16( $sp )
--    sw    $s3, 12( $sp )
--    sw    $s2, 8 ( $sp )
--    sw    $s1, 4 ( $sp )
--    sw    $s0, 0 ( $sp )
--    
--    addi    $s2, $a0, 0
--    addi    $s3, $a1, 0
--    addi    $s0, $zero, 0
--    
--    for1tst :
--        slt    $t0, $s0, $s3
--        beq    $t0, $zero, exit1
--        addi   $s1, $s0, -1
--        
--        for2tst:
--            slti   $t0, $s1, 0
--            bne    $t0, $zero, exit2
--            sll    $t1, $s1, 2
--            add    $t2, $s2, $t1
--            lw     $t3, 0($t2)
--            lw     $t4, 4($t2)
--            slt    $t0, $t4, $t3
--            beq    $t0, $zero, exit2
--            
--            addi    $a0, $s2, 0
--            addi    $a1, $s1, 0
--            jal    swap
--            noop
--            noop
--            noop
--            addi    $s1, $s1, -1
--            j    for2tst
--            noop
--            noop
--            noop  
--        exit2:
--            addi    $s0, $s0, 1
--            j    for1tst
--            noop
--            noop
--            noop
--    exit1:
--        lw    $s0, 0 ( $sp )
--        lw    $s1, 4 ( $sp )
--        lw    $s2, 8 ( $sp )
--        lw    $s3, 12( $sp )
--        lw    $ra, 16( $sp )
--        addi  $sp, $sp, 20
--        
--        jr     $ra
--        noop
--        noop
--        noop
--
--# swap function
--swap :
--    sll    $t1, $a1, 2
--    add    $t1, $a0, $t1
--    lw    $t0, 0( $t1 )
--    lw    $t2, 4( $t1 )
--    noop
--    noop
--    sw    $t2, 0( $t1 )
--    sw    $t0, 4( $t1 )
--    
--    jr     $ra
--    
-- end:
-- noop 
CONTENT
BEGIN
-- Instruction formats
-- R ======-----=====-----=====------
-- I ======-----=====----------------
-- J ======--------------------------

0   : 00100000000111010000010000000000; -- addi r29, r0,  1024
1   : 10001100000001010000000000000000; -- lw   r5,  0(r0)
2   : 00100000000001000000000000000100; -- addi r4,  r0,  4
3   : 00001100000000000000000000001011; -- jal  11 (SORT)
4   : 00000000000000000000000000000000; -- nop
5   : 00000000000000000000000000000000; -- nop
6   : 00000000000000000000000000000000; -- nop
7   : 00001000000000000000000001000011; -- j    67 (END)
8   : 00000000000000000000000000000000; -- nop
9   : 00000000000000000000000000000000; -- nop
10  : 00000000000000000000000000000000; -- nop
11  : 00100011101111011111111111101100; -- addi r29, r29, -20 [SORT]
12  : 10101111101111110000000000010000; -- sw   r31, 16(r29)
13  : 10101111101100110000000000001100; -- sw   r19, 12(r29)
14  : 10101111101100100000000000001000; -- sw   r18,  8(r29)
15  : 10101111101100010000000000000100; -- sw   r17,  4(r29)
16  : 10101111101100000000000000000000; -- sw   r16,  0(r29)
17  : 00100000100100100000000000000000; -- addi r18, r4,  0
18  : 00100000101100110000000000000000; -- addi r19, r5,  0
19  : 00100000000100000000000000000000; -- addi r16, r0,  0
20  : 00000010000100110100000000101010; -- slt  r8,  r16, r19 [FOR1TST]
21  : 00010001000000000000000000011001; -- beq  r8, r0, +25 (EXIT1)
22  : 00100010000100011111111111111111; -- addi r17, r16, -1
23  : 00101010001010000000000000000000; -- slti r8, r17, 0 [FOR2TST]
24  : 00010101000000000000000000010001; -- bne  r8, r0, +17 (EXIT2)
25  : 00000000000100010100100010000000; -- sll  r9, r17, 2
26  : 00000010010010010101000000100000; -- add  r10, r18, r9
27  : 10001101010010110000000000000000; -- lw   r11, 0(r10)
28  : 10001101010011000000000000000100; -- lw   r12, 4(r10)
29  : 00000001100010110100000000101010; -- slt  r8, r12, r11
30  : 00010001000000000000000000001011; -- beq  r8, r0, +11 (EXIT2)
31  : 00100010010001000000000000000000; -- addi r4, r18, 0
32  : 00100010001001010000000000000000; -- addi r5, r17, 0
33  : 00001100000000000000000000111001; -- jal  57 (SWAP)
34  : 00000000000000000000000000000000; -- nop
35  : 00000000000000000000000000000000; -- nop
36  : 00000000000000000000000000000000; -- nop
37  : 00100010001100011111111111111111; -- addi r17, r17, -1
38  : 00001000000000000000000000010111; -- j    23 (FOR2TST)
39  : 00000000000000000000000000000000; -- nop
40  : 00000000000000000000000000000000; -- nop
41  : 00000000000000000000000000000000; -- nop
42  : 00100010000100000000000000000001; -- addi r16, r16, 1 [EXIT2]
43  : 00001000000000000000000000010100; -- j    20 (FOR1TST)
44  : 00000000000000000000000000000000; -- nop
45  : 00000000000000000000000000000000; -- nop
46  : 00000000000000000000000000000000; -- nop
47  : 10001111101100000000000000000000; -- lw   r16, 0(r29) [EXIT1]
48  : 10001111101100010000000000000100; -- lw   r17, 4(r29)
49  : 10001111101100100000000000001000; -- lw   r18, 8(r29)
50  : 10001111101100110000000000001100; -- lw   r19, 12(r29)
51  : 10001111101111110000000000010000; -- lw   r31, 16(r29)
52  : 00100011101111010000000000010100; -- addi r29, r29, 20
53  : 00000011111000000000000000001000; -- jr   r31
54  : 00000000000000000000000000000000; -- nop
55  : 00000000000000000000000000000000; -- nop
56  : 00000000000000000000000000000000; -- nop
57  : 00000000000001010100100010000000; -- sll  r9, r5, 2 [SWAP]
58  : 00000000100010010100100000100000; -- add  r9, r4, r9
59  : 10001101001010000000000000000000; -- lw   r8, 0(r9)
60  : 10001101001010100000000000000100; -- lw   r10, 4(r9)
61  : 00000000000000000000000000000000; -- nop
62  : 00000000000000000000000000000000; -- nop
63  : 00000000000000000000000000000000; -- nop
64  : 10101101001010100000000000000000; -- sw   r10, 0(r9)
65  : 10101101001010000000000000000100; -- sw   r8, 4(r9)
66  : 00000011111000000000000000001000; -- jr   r31

-- nop [END]
[67..256] : 00000000;
END;
